% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_utilities.R
\name{draw_dag}
\alias{draw_dag}
\title{Draw a small DAG with smart padding and optional curved edges}
\usage{
draw_dag(
  edges,
  curved = NULL,
  layout = "sugiyama",
  pad = 0.7,
  arrow_len_pt = 8,
  end_cap_mm = 8,
  linewidth = 0.75,
  node_size = 20,
  node_stroke = 1,
  strength_curved = 0.6
)
}
\arguments{
\item{edges}{A \code{data.frame} with at least two columns \code{from} and \code{to}
(character or factor) describing directed edges. If present, a column
\code{custom_color} is used to map edge colors via a manual palette.}

\item{curved}{One of:
\itemize{
\item \code{NULL} (default): no curved edges;
\item a logical vector of length \code{nrow(edges)} marking which edges are curved;
\item a character vector of keys \code{"X->Y"} selecting edges to curve;
\item a \code{data.frame} with columns \code{from} and \code{to} selecting edges to curve.
}}

\item{layout}{A layout name passed to \code{ggraph::create_layout()} / \code{ggraph()}
(e.g., \code{"auto"}, \code{"kk"}, \code{"fr"}, \code{"sugiyama"}, \code{"linear"}, ...).}

\item{pad}{Numeric padding added around the computed x/y ranges to
prevent clipping (applied symmetrically on both axes).}

\item{arrow_len_pt}{Arrow length (in points) for directed edges.}

\item{end_cap_mm}{End cap radius (in millimeters) for edge arrows.}

\item{linewidth}{Edge line width.}

\item{node_size}{Node point size.}

\item{node_stroke}{Node point stroke width.}

\item{strength_curved}{Curvature strength for curved edges passed to
\code{ggraph::geom_edge_arc2()} (non-curved edges use 0).}
}
\value{
A \strong{ggplot} object.
}
\description{
Plots a directed acyclic graph (DAG) from an edge list using \strong{ggraph},
with automatic axis limits padding and optional per-edge curvature.
Edges can be color-coded via a \code{custom_color} column (e.g., \code{"pairwise"},
\code{"complex"}, \code{"both"}), and a subset of edges can be drawn as arcs.
}
\details{
The function computes an automatic bounding box based on the chosen
\code{layout} and expands it by \code{pad} on both axes to reduce clipping and
keep the graph compact but readable.
If \code{edges$custom_color} exists, it is mapped with a fixed manual scale:
\code{"pairwise"} → grey, \code{"complex"} → black, \code{"both"} → greenish.

The \code{curved} argument supports multiple convenient notations. When a
character vector is supplied, edges are identified by the key
\code{paste(from, to, sep = "->")}.
}
\examples{
# Minimal example
edges <- data.frame(
  from = c("X","Z","Z","A"),
  to   = c("Y","Y","X","B"),
  custom_color = c("pairwise","both","complex","complex")
)

# Curving a specific edge by key:
p1 <- draw_dag(edges, curved = "Z->X", layout = "kk")
# Curving by logical vector:
p2 <- draw_dag(edges, curved = c(FALSE, TRUE, FALSE, TRUE), layout = "fr")
# Curving via data.frame(from, to):
sel <- data.frame(from = "Z", to = "X")
p3 <- draw_dag(edges, curved = sel, layout = "sugiyama")

# Print one:
# print(p1)

}
\seealso{
\code{\link[ggraph:ggraph]{ggraph::ggraph()}}, \code{\link[ggraph:geom_edge_arc]{ggraph::geom_edge_arc2()}}, \code{\link[igraph:graph_from_data_frame]{igraph::graph_from_data_frame()}}
}
